/*
 * NeoLoad API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ArrayOfElementDefinition;
import io.swagger.client.model.ArrayOfEventDefinition;
import io.swagger.client.model.ArrayOfSLAGlobalIndicatorDefinition;
import io.swagger.client.model.ArrayOfSLAPerIntervalDefinition;
import io.swagger.client.model.ArrayOfSLAPerTestResultDefinition;
import io.swagger.client.model.ArrayOfTestResultDefinition;
import io.swagger.client.model.CounterDefinition;
import io.swagger.client.model.CounterDefinitionArray;
import io.swagger.client.model.CounterValues;
import io.swagger.client.model.ElementDefinition;
import io.swagger.client.model.ElementValues;
import io.swagger.client.model.Error;
import io.swagger.client.model.EventType;
import java.io.File;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.MonitorPostRequest;
import io.swagger.client.model.PatchCustomEventError400;
import io.swagger.client.model.PatchCustomEventError404;
import io.swagger.client.model.PatchCustomEventRequest;
import io.swagger.client.model.PatchCustomEventResponse;
import io.swagger.client.model.Percentiles;
import io.swagger.client.model.Points;
import io.swagger.client.model.PostCustomEventError;
import io.swagger.client.model.PostCustomEventRequest;
import io.swagger.client.model.PostCustomEventResponse;
import io.swagger.client.model.RateLimitError;
import io.swagger.client.model.Sla;
import io.swagger.client.model.TestResultDefinition;
import io.swagger.client.model.TestResultRasterConfiguration;
import io.swagger.client.model.TestResultRasterMultiConfiguration;
import io.swagger.client.model.TestResultStatistics;
import io.swagger.client.model.TestResultStopRequest;
import io.swagger.client.model.TestResultUpdateRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ResultsApi
 */
@Ignore
public class ResultsApiTest {

    private final ResultsApi api = new ResultsApi();

    /**
     * Deletes a test result
     *
     * Deletes a test result and all the associated statistics. This action cannot be undone.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTestResultTest() throws ApiException {
        String workspaceId = null;
        String resultId = null;
        api.deleteTestResult(workspaceId, resultId);

        // TODO: test validations
    }
    /**
     * Test result raw data
     *
     * Provides all the test result raw data, with a content as CSV or JSON file. &lt;br /&gt;&lt;br /&gt; &lt;b&gt;&lt;i&gt;This endpoint may produce large files depending on Test Results. For production purposes please prefer using an API client rather than the browser.&lt;/i&gt;&lt;/b&gt; Provides the test result raw data for an element of category TRANSACTION, with a content as CSV or JSON file. &lt;br /&gt;&lt;br /&gt; &lt;b&gt;&lt;i&gt;Retention period for raw data is 7 days after which this will be permanently deleted.&lt;/i&gt;&lt;/b&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestRawResultTest() throws ApiException {
        String workspaceId = null;
        String resultId = null;
        String format = null;
        String response = api.getTestRawResult(workspaceId, resultId, format);

        // TODO: test validations
    }
    /**
     * Test result raw data of a TRANSACTION element
     *
     * Provides the test result raw data for an element of category TRANSACTION, with a content as CSV or JSON file. &lt;br /&gt;&lt;br /&gt; &lt;b&gt;&lt;i&gt;Retention period for raw data is 7 days after which this will be permanently deleted.&lt;/i&gt;&lt;/b&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestRawResultElementTest() throws ApiException {
        String workspaceId = null;
        String resultId = null;
        String elementId = null;
        String format = null;
        String response = api.getTestRawResultElement(workspaceId, resultId, elementId, format);

        // TODO: test validations
    }
    /**
     * Test result description
     *
     * Provides a test result description using a unique test result identifier. Provides name, dates, owner ...
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestResultTest() throws ApiException {
        String workspaceId = null;
        String resultId = null;
        TestResultDefinition response = api.getTestResult(workspaceId, resultId);

        // TODO: test validations
    }
    /**
     * Test result element definition
     *
     * Provides a test result element definition.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestResultElementDefinitionTest() throws ApiException {
        String workspaceId = null;
        String resultId = null;
        String elementId = null;
        ElementDefinition response = api.getTestResultElementDefinition(workspaceId, resultId, elementId);

        // TODO: test validations
    }
    /**
     * Test result elements
     *
     * Provides the tests elements of a test result. The elements type must be provided.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestResultElementsTest() throws ApiException {
        String workspaceId = null;
        String resultId = null;
        String category = null;
        ArrayOfElementDefinition response = api.getTestResultElements(workspaceId, resultId, category);

        // TODO: test validations
    }
    /**
     * Test result percentiles transaction since the beginning of the test result
     *
     * Provides the percentiles of a test result transaction.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestResultElementsPercentilesTest() throws ApiException {
        String workspaceId = null;
        String resultId = null;
        String elementId = null;
        Percentiles response = api.getTestResultElementsPercentiles(workspaceId, resultId, elementId);

        // TODO: test validations
    }
    /**
     * Test results elements points since the beginning of the test result
     *
     * Provides all the points of a test result element for the selected statistics.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestResultElementsPointsTest() throws ApiException {
        String workspaceId = null;
        String resultId = null;
        String elementId = null;
        String statistics = null;
        Points response = api.getTestResultElementsPoints(workspaceId, resultId, elementId, statistics);

        // TODO: test validations
    }
    /**
     * Test result elements SLA status since the beginning of the test result
     *
     * Provides the SLA status of a test result element.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestResultElementsSlaTest() throws ApiException {
        String workspaceId = null;
        String resultId = null;
        String elementId = null;
        Sla response = api.getTestResultElementsSla(workspaceId, resultId, elementId);

        // TODO: test validations
    }
    /**
     * Test result elements values
     *
     * Provides the values of a test result element.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestResultElementsValuesTest() throws ApiException {
        String workspaceId = null;
        String resultId = null;
        String elementId = null;
        ElementValues response = api.getTestResultElementsValues(workspaceId, resultId, elementId);

        // TODO: test validations
    }
    /**
     * Test result events
     *
     * List the events of the specified test result according to the method parameters. ___ *Sortable fields :*   - offset   - fullname   - code   - source 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestResultEventsTest() throws ApiException {
        String workspaceId = null;
        String resultId = null;
        List<EventType> types = null;
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        ArrayOfEventDefinition response = api.getTestResultEvents(workspaceId, resultId, types, limit, offset, sort);

        // TODO: test validations
    }
    /**
     * Test result Graph
     *
     * Provides a graph from some stats of a test result.  Element statistics can be mixed with monitor statistics. Only limitation is around PERCENTILES_DURATION element statistic that cannot be mixed with other element statistics neither with monitor statistics. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestResultGraphTest() throws ApiException {
        String workspaceId = null;
        String resultId = null;
        TestResultRasterConfiguration body = null;
        File response = api.getTestResultGraph(workspaceId, resultId, body);

        // TODO: test validations
    }
    /**
     * Lists test results
     *
     * Lists the test results of the Workspace according to the method parameters. ___ *Sortable fields :*   - name   - project   - startDate (descending sort by default : the most recent first)   - qualityStatus 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestResultListTest() throws ApiException {
        String workspaceId = null;
        String status = null;
        String project = null;
        String author = null;
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        String fields = null;
        Boolean pretty = null;
        ArrayOfTestResultDefinition response = api.getTestResultList(workspaceId, status, project, author, limit, offset, sort, fields, pretty);

        // TODO: test validations
    }
    /**
     * Test result counter definition
     *
     * Provides the definition of a test result counter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestResultMonitorDefinitionTest() throws ApiException {
        String workspaceId = null;
        String resultId = null;
        String counterId = null;
        CounterDefinition response = api.getTestResultMonitorDefinition(workspaceId, resultId, counterId);

        // TODO: test validations
    }
    /**
     * Test result monitors
     *
     * Provides all the test result counters of all monitors for a test result.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestResultMonitorsTest() throws ApiException {
        String workspaceId = null;
        String resultId = null;
        CounterDefinitionArray response = api.getTestResultMonitors(workspaceId, resultId);

        // TODO: test validations
    }
    /**
     * Test result monitors points
     *
     * Provides all the points of a test result counter. The values are the average on the specified interval.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestResultMonitorsPointsTest() throws ApiException {
        String workspaceId = null;
        String resultId = null;
        String counterId = null;
        Points response = api.getTestResultMonitorsPoints(workspaceId, resultId, counterId);

        // TODO: test validations
    }
    /**
     * Test result monitors values
     *
     * Provides the values of a test result counter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestResultMonitorsValuesTest() throws ApiException {
        String workspaceId = null;
        String resultId = null;
        String counterId = null;
        CounterValues response = api.getTestResultMonitorsValues(workspaceId, resultId, counterId);

        // TODO: test validations
    }
    /**
     * Test results MultiGraph
     *
     * Provides a graph from some stats of some tests result.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestResultMultiGraphTest() throws ApiException {
        String workspaceId = null;
        TestResultRasterMultiConfiguration body = null;
        File response = api.getTestResultMultiGraph(workspaceId, body);

        // TODO: test validations
    }
    /**
     * SLAs global indicators
     *
     * Provides the SLAs global indicators of the test result.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestResultSLAGlobalIndicatorsTest() throws ApiException {
        String workspaceId = null;
        String resultId = null;
        String status = null;
        ArrayOfSLAGlobalIndicatorDefinition response = api.getTestResultSLAGlobalIndicators(workspaceId, resultId, status);

        // TODO: test validations
    }
    /**
     * SLAs per time interval
     *
     * Provides the SLAs per time interval of a specific test result.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestResultSLAPerIntervalTest() throws ApiException {
        String workspaceId = null;
        String resultId = null;
        String status = null;
        String category = null;
        ArrayOfSLAPerIntervalDefinition response = api.getTestResultSLAPerInterval(workspaceId, resultId, status, category);

        // TODO: test validations
    }
    /**
     * SLAs per test
     *
     * Provides the SLAs per test of a specific test result.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestResultSLAPerTestTest() throws ApiException {
        String workspaceId = null;
        String resultId = null;
        String status = null;
        String category = null;
        ArrayOfSLAPerTestResultDefinition response = api.getTestResultSLAPerTest(workspaceId, resultId, status, category);

        // TODO: test validations
    }
    /**
     * Test result main statistics
     *
     * Provides the main statistics of a test result. For a runnning test, these statistics are live, for a test result, those are average for the all test result.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestResultStatisticsTest() throws ApiException {
        String workspaceId = null;
        String resultId = null;
        TestResultStatistics response = api.getTestResultStatistics(workspaceId, resultId);

        // TODO: test validations
    }
    /**
     * Partially update a Test Result custom event
     *
     * Update a field of an existing custom event:   - endTimestamp   - description   - url  Custom events with INSTANT timeframe can be patched to TIME_RANGE timeframe by setting an endTimestamp different than the startTimestamp.  Custom events with TIME_RANGE timeframe can be patched to INSTANT timeframe by setting an endTimestamp equals to the startTimestamp.  Custom events timestamps are in seconds.  Request to patch a custom event has some constraints, see &lt;a href&#x3D;\&quot;#model-PatchCustomEventRequest\&quot;&gt;PatchCustomEventRequest model&lt;/a&gt; to get more details. ____ 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchTestResultCustomEventTest() throws ApiException {
        PatchCustomEventRequest body = null;
        String workspaceId = null;
        String resultId = null;
        String eventId = null;
        PatchCustomEventResponse response = api.patchTestResultCustomEvent(body, workspaceId, resultId, eventId);

        // TODO: test validations
    }
    /**
     * Create a Test Result custom event
     *
     * Creates a Test Result custom event.  Custom events stored by this endpoint can be retrieved using the [GetTestResultEvents](#/Results/GetTestResultEvents) endpoint.  Custom events allow you to associate to a Test Result events that occurred outside of NeoLoad.  Custom events can have two different kinds of timeframe:   - INSTANT: an event having a timestamp and a duration of 0 seconds.   - TIME_RANGE: an event having a start timestamp and an end timestamp.  Custom events timestamps are in seconds.  The maximum of custom events per Test Result is 1000.  Custom events must match some constraints, see &lt;a href&#x3D;\&quot;#model-PostCustomEventRequest\&quot;&gt;PostCustomEventRequest model&lt;/a&gt; to get more details. ____ 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postTestResultCustomEventTest() throws ApiException {
        PostCustomEventRequest body = null;
        String workspaceId = null;
        String resultId = null;
        PostCustomEventResponse response = api.postTestResultCustomEvent(body, workspaceId, resultId);

        // TODO: test validations
    }
    /**
     * Create custom monitors
     *
     * Pushes monitoring data (external data) for a given running test. &lt;br/&gt;&lt;br/&gt; &lt;b&gt;Resolution limitation&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;Maximum resolution for a monitor value is &lt;b&gt;1 per second&lt;/b&gt;, otherwise &lt;b&gt;the first value is kept&lt;/b&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Maximum paths and monitors&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;Maximum 100 different &lt;b&gt;unique&lt;/b&gt; paths.&lt;/li&gt;   &lt;li&gt;Maximum 50 different monitors for a given path.&lt;/li&gt;   &lt;li&gt;Maximum length is 10 for a path.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Other requirements&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;&#x27;/&#x27; character is not allowed in path element.&lt;/li&gt;   &lt;li&gt;The test must be &lt;b&gt;running&lt;/b&gt; while pushing the data.&lt;/li&gt;   &lt;li&gt;For a given timestamp, all monitors relative to a path must be sent in the same request.&lt;/li&gt;   &lt;li&gt;These elements must not be empty: &lt;b&gt;monitor name&lt;/b&gt;, &lt;b&gt;a path element&lt;/b&gt; and &lt;b&gt;values&lt;/b&gt;.&lt;/li&gt; &lt;/ul&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postTestResultMonitorsTest() throws ApiException {
        MonitorPostRequest body = null;
        String workspaceId = null;
        String resultId = null;
        api.postTestResultMonitors(body, workspaceId, resultId);

        // TODO: test validations
    }
    /**
     * Stop a running test result
     *
     * Stop the running test result with the specified id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopTestResultTest() throws ApiException {
        TestResultStopRequest body = null;
        String workspaceId = null;
        String resultId = null;
        InlineResponse200 response = api.stopTestResult(body, workspaceId, resultId);

        // TODO: test validations
    }
    /**
     * Update a test result
     *
     * Updates a test result with new name, description or quality status.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTestResultTest() throws ApiException {
        TestResultUpdateRequest body = null;
        String workspaceId = null;
        String resultId = null;
        TestResultDefinition response = api.updateTestResult(body, workspaceId, resultId);

        // TODO: test validations
    }
}
