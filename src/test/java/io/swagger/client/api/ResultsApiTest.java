/*
 * NeoLoad API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ArrayOfElementDefinition;
import io.swagger.client.model.ArrayOfEventDefinition;
import io.swagger.client.model.ArrayOfSLAGlobalIndicatorDefinition;
import io.swagger.client.model.ArrayOfSLAPerIntervalDefinition;
import io.swagger.client.model.ArrayOfSLAPerTestDefinition;
import io.swagger.client.model.ArrayOfTestDefinition;
import io.swagger.client.model.CounterDefinition;
import io.swagger.client.model.CounterDefinitionArray;
import io.swagger.client.model.CounterValues;
import io.swagger.client.model.ElementDefinition;
import io.swagger.client.model.ElementValues;
import io.swagger.client.model.Error;
import io.swagger.client.model.EventType;
import java.io.File;
import io.swagger.client.model.MonitorPostRequest;
import io.swagger.client.model.Percentiles;
import io.swagger.client.model.Points;
import io.swagger.client.model.RateLimitError;
import io.swagger.client.model.Sla;
import io.swagger.client.model.TestDefinition;
import io.swagger.client.model.TestRasterConfiguration;
import io.swagger.client.model.TestRasterMultiConfiguration;
import io.swagger.client.model.TestStatistics;
import io.swagger.client.model.TestUpdateRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ResultsApi
 */
@Ignore
public class ResultsApiTest {

    private final ResultsApi api = new ResultsApi();

    /**
     * Deletes a test result
     *
     * Deletes a test result and all the associated statistics. This action cannot be undone.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTestTest() throws ApiException {
        String testId = null;
        api.deleteTest(testId);

        // TODO: test validations
    }
    /**
     * Test result description
     *
     * Provides a test result description using a unique test result identifier. Provides name, dates, owner ...
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestTest() throws ApiException {
        String testId = null;
        TestDefinition response = api.getTest(testId);

        // TODO: test validations
    }
    /**
     * Test result element definition
     *
     * Provides a test result element definition.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestElementDefinitionTest() throws ApiException {
        String testId = null;
        String elementId = null;
        ElementDefinition response = api.getTestElementDefinition(testId, elementId);

        // TODO: test validations
    }
    /**
     * Test elements
     *
     * Provides the tests elements of a test result. The elements type must be provided.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestElementsTest() throws ApiException {
        String testId = null;
        String category = null;
        ArrayOfElementDefinition response = api.getTestElements(testId, category);

        // TODO: test validations
    }
    /**
     * Test result percentiles transaction since the beginning of the test result
     *
     * Provides the percentiles of a test result transaction.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestElementsPercentilesTest() throws ApiException {
        String testId = null;
        String elementId = null;
        Percentiles response = api.getTestElementsPercentiles(testId, elementId);

        // TODO: test validations
    }
    /**
     * Test results elements points since the beginning of the test result
     *
     * Provides all the points of a test result element for the selected statistics.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestElementsPointsTest() throws ApiException {
        String testId = null;
        String elementId = null;
        String statistics = null;
        Points response = api.getTestElementsPoints(testId, elementId, statistics);

        // TODO: test validations
    }
    /**
     * Test result elements SLA status since the beginning of the test result
     *
     * Provides the SLA status of a test result element.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestElementsSlaTest() throws ApiException {
        String testId = null;
        String elementId = null;
        Sla response = api.getTestElementsSla(testId, elementId);

        // TODO: test validations
    }
    /**
     * Test result elements values
     *
     * Provides the values of a test result element.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestElementsValuesTest() throws ApiException {
        String testId = null;
        String elementId = null;
        ElementValues response = api.getTestElementsValues(testId, elementId);

        // TODO: test validations
    }
    /**
     * Test result events
     *
     * List the events of the specified test result according to the method parameters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestEventsTest() throws ApiException {
        String testId = null;
        List<EventType> types = null;
        Integer limit = null;
        Integer offset = null;
        ArrayOfEventDefinition response = api.getTestEvents(testId, types, limit, offset);

        // TODO: test validations
    }
    /**
     * Test result Graph
     *
     * Provides a graph from some stats of a test result.  Element statistics can be mixed with monitor statistics. Only limitation is around PERCENTILES_DURATION element statistic that cannot be mixed with other element statistics neither with monitor statistics. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestGraphTest() throws ApiException {
        String testId = null;
        TestRasterConfiguration body = null;
        File response = api.getTestGraph(testId, body);

        // TODO: test validations
    }
    /**
     * Test result counter definition
     *
     * Provides the definition of a test result counter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestMonitorDefinitionTest() throws ApiException {
        String testId = null;
        String counterId = null;
        CounterDefinition response = api.getTestMonitorDefinition(testId, counterId);

        // TODO: test validations
    }
    /**
     * Test result monitors
     *
     * Provides all the test result counters of all monitors for a test result.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestMonitorsTest() throws ApiException {
        String testId = null;
        CounterDefinitionArray response = api.getTestMonitors(testId);

        // TODO: test validations
    }
    /**
     * Test result monitors points
     *
     * Provides all the points of a test result counter. The values are the average on the specified interval.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestMonitorsPointsTest() throws ApiException {
        String testId = null;
        String counterId = null;
        Points response = api.getTestMonitorsPoints(testId, counterId);

        // TODO: test validations
    }
    /**
     * Test result monitors values
     *
     * Provides the values of a test result counter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestMonitorsValuesTest() throws ApiException {
        String testId = null;
        String counterId = null;
        CounterValues response = api.getTestMonitorsValues(testId, counterId);

        // TODO: test validations
    }
    /**
     * Test results MultiGraph
     *
     * Provides a graph from some stats of some tests result.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestMultiGraphTest() throws ApiException {
        TestRasterMultiConfiguration body = null;
        File response = api.getTestMultiGraph(body);

        // TODO: test validations
    }
    /**
     * SLAs global indicators
     *
     * Provides the SLAs global indicators of the test result.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestSLAGlobalIndicatorsTest() throws ApiException {
        String testId = null;
        String status = null;
        ArrayOfSLAGlobalIndicatorDefinition response = api.getTestSLAGlobalIndicators(testId, status);

        // TODO: test validations
    }
    /**
     * SLAs per time interval
     *
     * Provides the SLAs per time interval of a specific test result.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestSLAPerIntervalTest() throws ApiException {
        String testId = null;
        String status = null;
        String category = null;
        ArrayOfSLAPerIntervalDefinition response = api.getTestSLAPerInterval(testId, status, category);

        // TODO: test validations
    }
    /**
     * SLAs per test
     *
     * Provides the SLAs per test of a specific test result.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestSLAPerTestTest() throws ApiException {
        String testId = null;
        String status = null;
        String category = null;
        ArrayOfSLAPerTestDefinition response = api.getTestSLAPerTest(testId, status, category);

        // TODO: test validations
    }
    /**
     * Test result main statistics
     *
     * Provides the main statistics of a test result. For a runnning test, these statistics are live, for a test result, those are average for the all test result.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestStatisticsTest() throws ApiException {
        String testId = null;
        TestStatistics response = api.getTestStatistics(testId);

        // TODO: test validations
    }
    /**
     * Lists test results
     *
     * Lists the test results of the Account according to the method parameters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestsTest() throws ApiException {
        String status = null;
        String project = null;
        String author = null;
        Integer limit = null;
        Integer offset = null;
        String fields = null;
        Boolean pretty = null;
        ArrayOfTestDefinition response = api.getTests(status, project, author, limit, offset, fields, pretty);

        // TODO: test validations
    }
    /**
     * Create custom monitors
     *
     * Pushes monitoring data (external data) for a given running test. &lt;br/&gt;&lt;br/&gt; &lt;b&gt;Resolution limitation&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;Maximum resolution for a monitor value is &lt;b&gt;1 per second&lt;/b&gt;, otherwise &lt;b&gt;the first value is kept&lt;/b&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Maximum paths and monitors&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;Maximum 100 different &lt;b&gt;unique&lt;/b&gt; paths.&lt;/li&gt;   &lt;li&gt;Maximum 50 different monitors for a given path.&lt;/li&gt;   &lt;li&gt;Maximum length is 10 for a path.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Other requirements&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;&#x27;/&#x27; character is not allowed in path element.&lt;/li&gt;   &lt;li&gt;The test must be &lt;b&gt;running&lt;/b&gt; while pushing the data.&lt;/li&gt;   &lt;li&gt;For a given timestamp, all monitors relative to a path must be sent in the same request.&lt;/li&gt;   &lt;li&gt;These elements must not be empty: &lt;b&gt;monitor name&lt;/b&gt;, &lt;b&gt;a path element&lt;/b&gt; and &lt;b&gt;values&lt;/b&gt;.&lt;/li&gt; &lt;/ul&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postTestMonitorsTest() throws ApiException {
        MonitorPostRequest body = null;
        String testId = null;
        api.postTestMonitors(body, testId);

        // TODO: test validations
    }
    /**
     * Update a test result
     *
     * Updates a test result with new name, description or quality status.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTestTest() throws ApiException {
        TestUpdateRequest body = null;
        String testId = null;
        TestDefinition response = api.updateTest(body, testId);

        // TODO: test validations
    }
}
