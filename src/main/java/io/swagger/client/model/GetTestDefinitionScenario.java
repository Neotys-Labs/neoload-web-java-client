/*
 * NeoLoad API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Custom scenario from the test, additional info on as-code scenario can be found on https://www.neotys.com/documents/doc/modules/as-code/scenario.html
 */
@Schema(description = "Custom scenario from the test, additional info on as-code scenario can be found on https://www.neotys.com/documents/doc/modules/as-code/scenario.html")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-04-16T09:41:51.665+02:00[Europe/Paris]")


public class GetTestDefinitionScenario {
  @SerializedName("name")
  private String name = null;

  @SerializedName("store_variables_for_raw_data")
  private Boolean storeVariablesForRawData = false;

  @SerializedName("populations")
  private List<OneOfGetTestDefinitionScenarioPopulationsItems> populations = new ArrayList<OneOfGetTestDefinitionScenarioPopulationsItems>();

  public GetTestDefinitionScenario name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Unique name/identifier of the scenario, identical to the name of the test.
   * @return name
  **/
  @Schema(example = "New Test 1", required = true, description = "Unique name/identifier of the scenario, identical to the name of the test.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public GetTestDefinitionScenario storeVariablesForRawData(Boolean storeVariablesForRawData) {
    this.storeVariablesForRawData = storeVariablesForRawData;
    return this;
  }

   /**
   * This option allows storing variables for raw data.
   * @return storeVariablesForRawData
  **/
  @Schema(description = "This option allows storing variables for raw data.")
  public Boolean isStoreVariablesForRawData() {
    return storeVariablesForRawData;
  }

  public void setStoreVariablesForRawData(Boolean storeVariablesForRawData) {
    this.storeVariablesForRawData = storeVariablesForRawData;
  }

  public GetTestDefinitionScenario populations(List<OneOfGetTestDefinitionScenarioPopulationsItems> populations) {
    this.populations = populations;
    return this;
  }

  public GetTestDefinitionScenario addPopulationsItem(OneOfGetTestDefinitionScenarioPopulationsItems populationsItem) {
    this.populations.add(populationsItem);
    return this;
  }

   /**
   * The list of runtime settings per population
   * @return populations
  **/
  @Schema(required = true, description = "The list of runtime settings per population")
  public List<OneOfGetTestDefinitionScenarioPopulationsItems> getPopulations() {
    return populations;
  }

  public void setPopulations(List<OneOfGetTestDefinitionScenarioPopulationsItems> populations) {
    this.populations = populations;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetTestDefinitionScenario getTestDefinitionScenario = (GetTestDefinitionScenario) o;
    return Objects.equals(this.name, getTestDefinitionScenario.name) &&
        Objects.equals(this.storeVariablesForRawData, getTestDefinitionScenario.storeVariablesForRawData) &&
        Objects.equals(this.populations, getTestDefinitionScenario.populations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, storeVariablesForRawData, populations);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetTestDefinitionScenario {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    storeVariablesForRawData: ").append(toIndentedString(storeVariablesForRawData)).append("\n");
    sb.append("    populations: ").append(toIndentedString(populations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
